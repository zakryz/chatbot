services:
  chatbot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: chatbot
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./data:/app/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - chatbot-network
    expose:
      - "8000"
  
  nginx:
      image: nginx:latest
      container_name: chatbot_nginx
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ./nginx/conf.d:/etc/nginx/conf.d:ro
        - /etc/letsencrypt/live/gamesarcq.xyz/fullchain.pem:/etc/nginx/ssl/fullchain.pem:ro
        - /etc/letsencrypt/live/gamesarcq.xyz/privkey.pem:/etc/nginx/ssl/privkey.pem:ro
      depends_on:
        chatbot:
          condition: service_healthy
      command: /bin/sh -c "mkdir -p /etc/nginx/ssl && nginx -g 'daemon off;'"
      networks:
        - chatbot-network

  # Optionally add a database service if needed
  # db:
  #   image: postgres:15-alpine
  #   container_name: chatbot-db
  #   restart: always
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=chatbot
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - chatbot-network

networks:
  chatbot-network:
    driver: bridge

# Uncomment if using database
# volumes:
#   postgres_data:
